import unittest

import pandas as pd

from mecon.etl import monzo_data

example_json = [{
    "id": "transaction_id_1",
    "created": "2023-09-11T01:34:05.9Z",
    "description": "TfL Travel Charge      TFL.gov.uk/CP GBR",
    "amount": -515,
    "fees": {},
    "currency": "GBP",
    "merchant": {
        "id": "example_id",
        "group_id": "example_id",
        "name": "Transport for London",
        "logo": "https://merchant-logos.monzo.com/3bf4a6239b7161f430d4bcb6c73e25e2.png",
        "emoji": "\ud83d\ude86",
        "category": "transport",
        "online": True,
        "atm": False,
        "address": {
            "short_formatted": "Somewhere in Windsor House, 42-50 Victoria Street, London SW1H 0TL",
            "city": "London",
            "latitude": 51.4977668,
            "longitude": -0.1350935,
            "zoom_level": 4,
            "approximate": True,
            "formatted": "Windsor House, 42-50 Victoria Street, London SW1H 0TL, United Kingdom",
            "address": "Windsor House, 42-50 Victoria Street",
            "region": "Greater London",
            "country": "GBR",
            "postcode": "SW1H 0TL"
        },
        "disable_feedback": True,
        "suggested_tags": "#london #tube #tfl",
        "metadata": {
            "suggested_tags": "#london #tube #tfl",
            "website": "http://www.tfl.gov.uk/"
        }
    },
    "merchant_feedback_uri": "example_uri",
    "notes": "Travel charge for Wednesday, 8 Nov",
    "metadata": {
        "ledger_committed_timestamp_earliest": "2023-11-09T01:34:05.9Z",
        "ledger_committed_timestamp_latest": "2023-11-09T15:09:38.199Z",
        "ledger_insertion_id": "example_id",
        "mastercard_approval_type": "full",
        "mastercard_auth_message_id": "example_id",
        "mastercard_card_id": "example_id",
        "mastercard_clearing_message_id": "example_id",
        "mastercard_lifecycle_id": "example_id",
        "mcc": "example_id",
        "notes": "Travel charge for Wednesday, 8 Nov",
        "standin_correlation_id": "example_id",
        "token_transaction_identifier": "example_id=",
        "token_unique_reference": "example_id",
        "tokenization_method": "android_pay"
    },
    "labels": False,
    "attachments": False,
    "international": False,
    "category": "transport",
    "categories": {
        "transport": -515
    },
    "is_load": False,
    "settled": "2023-11-09T15:09:38.199Z",
    "local_amount": -515,
    "local_currency": "GBP",
    "updated": "2023-11-09T15:09:38.473Z",
    "account_id": "example_id",
    "user_id": "example_id",
    "counterparty": {},
    "scheme": "mastercard",
    "dedupe_id": "example_id",
    "originator": False,
    "include_in_spending": True,
    "can_be_excluded_from_breakdown": True,
    "can_be_made_subscription": True,
    "can_split_the_bill": True,
    "can_add_to_tab": True,
    "can_match_transactions_in_categorization": True,
    "amount_is_pending": False,
    "atm_fees_detailed": False,
    "parent_account_id": ""
},{
    "id": "transaction_id_1",
    "created": "2023-11-09T01:34:05.9Z",
    "description": "TfL Travel Charge      TFL.gov.uk/CP GBR",
    "amount": -515,
    "fees": {},
    "currency": "GBP",
    "merchant": {
        "id": "example_id",
        "group_id": "example_id",
        "name": "Transport for London",
        "logo": "https://merchant-logos.monzo.com/3bf4a6239b7161f430d4bcb6c73e25e2.png",
        "emoji": "\ud83d\ude86",
        "category": "transport",
        "online": True,
        "atm": False,
        "address": {
            "short_formatted": "Somewhere in Windsor House, 42-50 Victoria Street, London SW1H 0TL",
            "city": "London",
            "latitude": 51.4977668,
            "longitude": -0.1350935,
            "zoom_level": 4,
            "approximate": True,
            "formatted": "Windsor House, 42-50 Victoria Street, London SW1H 0TL, United Kingdom",
            "address": "Windsor House, 42-50 Victoria Street",
            "region": "Greater London",
            "country": "GBR",
            "postcode": "SW1H 0TL"
        },
        "disable_feedback": True,
        "suggested_tags": "#london #tube #tfl",
        "metadata": {
            "suggested_tags": "#london #tube #tfl",
            "website": "http://www.tfl.gov.uk/"
        }
    },
    "merchant_feedback_uri": "example_uri",
    "notes": "Travel charge for Wednesday, 8 Nov",
    "metadata": {
        "ledger_committed_timestamp_earliest": "2023-11-09T01:34:05.9Z",
        "ledger_committed_timestamp_latest": "2023-11-09T15:09:38.199Z",
        "ledger_insertion_id": "example_id",
        "mastercard_approval_type": "full",
        "mastercard_auth_message_id": "example_id",
        "mastercard_card_id": "example_id",
        "mastercard_clearing_message_id": "example_id",
        "mastercard_lifecycle_id": "example_id",
        "mcc": "example_id",
        "notes": "Travel charge for Wednesday, 8 Nov",
        "standin_correlation_id": "example_id",
        "token_transaction_identifier": "example_id=",
        "token_unique_reference": "example_id",
        "tokenization_method": "android_pay"
    },
    "labels": False,
    "attachments": False,
    "international": False,
    "category": "transport",
    "categories": {
        "transport": -515
    },
    "is_load": False,
    "settled": "2023-11-09T15:09:38.199Z",
    "local_amount": -515,
    "local_currency": "GBP",
    "updated": "2023-11-09T15:09:38.473Z",
    "account_id": "example_id",
    "user_id": "example_id",
    "counterparty": {},
    "scheme": "mastercard",
    "dedupe_id": "example_id",
    "originator": False,
    "include_in_spending": True,
    "can_be_excluded_from_breakdown": True,
    "can_be_made_subscription": True,
    "can_split_the_bill": True,
    "can_add_to_tab": True,
    "can_match_transactions_in_categorization": True,
    "amount_is_pending": False,
    "atm_fees_detailed": False,
    "parent_account_id": ""
},
    {
        "id": "transaction_id_2",
        "created": "2023-11-14T13:52:19.357Z",
        "description": "Monzo-ZQCJM",
        "amount": 10000,
        "fees": {},
        "currency": "GBP",
        "merchant": False,
        "merchant_feedback_uri": "example_uri",
        "notes": "Monzo-ZQCJM",
        "metadata": {
            "faster_payment": "True",
            "fps_fpid": "example_id",
            "fps_payment_id": "example_id",
            "insertion": "example_id",
            "ledger_committed_timestamp_earliest": "2023-11-example_id:52:19.591Z",
            "ledger_committed_timestamp_latest": "2023-example_id-14T13:52:19.591Z",
            "notes": "Monzo-ZQCJM",
            "open_banking_initiation_id": "example_id",
            "open_banking_initiation_type": "single_immediate_payment",
            "open_banking_initiator": "app_topup",
            "open_banking_provider_id": "example_id",
            "payee_id": "example_id",
            "standin_correlation_id": "example_id",
            "trn": "example_id"
        },
        "labels": False,
        "attachments": False,
        "international": False,
        "category": "transfers",
        "categories": {
            "transfers": 10000
        },
        "is_load": False,
        "settled": "2023-11-14T17:00:00Z",
        "local_amount": 10000,
        "local_currency": "GBP",
        "updated": "2023-11-14T13:52:20.174Z",
        "account_id": "example_id",
        "user_id": "",
        "counterparty": {
            "account_number": "example_id",
            "name": "test_my_name",
            "sort_code": "example_id",
            "user_id": "example_id"
        },
        "scheme": "payport_faster_payments",
        "dedupe_id": "example_id",
        "originator": False,
        "include_in_spending": False,
        "can_be_excluded_from_breakdown": False,
        "can_be_made_subscription": False,
        "can_split_the_bill": False,
        "can_add_to_tab": False,
        "can_match_transactions_in_categorization": False,
        "amount_is_pending": False,
        "atm_fees_detailed": False,
        "parent_account_id": ""
    },
    {
        "id": "transaction_id_3",
        "created": "2023-12-16T22:26:58.126Z",
        "description": "test_name",
        "amount": -1200,
        "fees": {},
        "currency": "GBP",
        "merchant": None,
        "merchant_feedback_uri": "example_uri",
        "notes": "",
        "metadata": {
            "ledger_committed_timestamp_earliest": "2023-12-16T22:26:58.126Z",
            "ledger_committed_timestamp_latest": "2023-12-16T22:26:58.126Z",
            "outbound_payment_trace_id": "example_id",
            "p2p_initiator": "p2p",
            "p2p_is_to_self": "False",
            "p2p_transfer_id": "example_id",
            "payee_id": "example_id"
        },
        "labels": None,
        "attachments": None,
        "international": None,
        "category": "general",
        "categories": {
            "general": -1200
        },
        "is_load": False,
        "settled": "2023-12-16T22:26:58.126Z",
        "local_amount": -1200,
        "local_currency": "GBP",
        "updated": "2023-12-16T22:26:58.625Z",
        "account_id": "example_id",
        "user_id": "example_id",
        "counterparty": {
            "account_id": "example_id",
            "name": "test_friend_name",
            "preferred_name": "test_friend_name",
            "user_id": "example_id"
        },
        "scheme": "p2p_payment",
        "dedupe_id": "example_id",
        "originator": True,
        "include_in_spending": True,
        "can_be_excluded_from_breakdown": True,
        "can_be_made_subscription": False,
        "can_split_the_bill": True,
        "can_add_to_tab": False,
        "can_match_transactions_in_categorization": False,
        "amount_is_pending": False,
        "atm_fees_detailed": None,
        "parent_account_id": ""
    }]


class MonzoDataTransformerTestCase(unittest.TestCase):
    def test_convert_transactions_to_df(self):
        df_transformed = monzo_data.MonzoDataTransformer.convert_transactions_to_df(example_json)

        pd.testing.assert_frame_equal(df_transformed, pd.DataFrame(data=[
            {'Transaction ID': 'transaction_id_1', 'Date': '2023-09-11',
             'Time': '01:34:05', 'Type': 'Card Payment', 'Name': 'Transport for London', 'Emoji': '🚆',
             'Category': 'transport', 'Amount': -5.15, 'Currency': 'GBP', 'Local amount': -5.15,
             'Local currency': 'GBP', 'Notes and #tags': 'Travel charge for Wednesday, 8 Nov tags=(london tube tfl)',
             'Address': 'Windsor House, 42-50 Victoria Street, London SW1H 0TL, United Kingdom', 'Receipt': '',
             'Category split': {'transport': -515}, 'Description': 'TfL Travel Charge      TFL.gov.uk/CP GBR',
             'Money In': -5.15, 'Money Out': ''},
            {'Transaction ID': 'transaction_id_1', 'Date': '2023-11-09',
             'Time': '01:34:05', 'Type': 'Card Payment', 'Name': 'Transport for London', 'Emoji': '🚆',
             'Category': 'transport', 'Amount': -5.15, 'Currency': 'GBP', 'Local amount': -5.15,
             'Local currency': 'GBP', 'Notes and #tags': 'Travel charge for Wednesday, 8 Nov tags=(london tube tfl)',
             'Address': 'Windsor House, 42-50 Victoria Street, London SW1H 0TL, United Kingdom', 'Receipt': '',
             'Category split': {'transport': -515}, 'Description': 'TfL Travel Charge      TFL.gov.uk/CP GBR',
             'Money In': -5.15, 'Money Out': ''},
            {'Transaction ID': 'transaction_id_2', 'Date': '2023-11-14',
             'Time': '13:52:19', 'Type': 'Faster Payment', 'Name': 'test_my_name', 'Emoji': None,
             'Category': 'transfers', 'Amount': 100.0, 'Currency': 'GBP', 'Local amount': 100.0,
             'Local currency': 'GBP', 'Notes and #tags': 'Monzo-ZQCJM tags=()', 'Address': '[Online]', 'Receipt': '',
             'Category split': {'transfers': 10000}, 'Description': 'Monzo-ZQCJM', 'Money In': '', 'Money Out': 100.0},
            {'Transaction ID': 'transaction_id_3', 'Date': '2023-12-16',
             'Time': '22:26:58', 'Type': 'Monzo-to-Monzo', 'Name': 'test_friend_name', 'Emoji': None,
             'Category': 'general', 'Amount': -12.0, 'Currency': 'GBP', 'Local amount': -12.0, 'Local currency': 'GBP',
             'Notes and #tags': ' tags=()', 'Address': '[Online]', 'Receipt': '', 'Category split': {'general': -1200},
             'Description': 'test_name', 'Money In': -12.0, 'Money Out': ''}]))

        self.assertListEqual(df_transformed['Date'].to_list(), ['2023-09-11', '2023-11-09', '2023-11-14', '2023-12-16'])

        self.assertListEqual(df_transformed['Time'].to_list(), ['01:34:05',  '01:34:05', '13:52:19', '22:26:58'])
